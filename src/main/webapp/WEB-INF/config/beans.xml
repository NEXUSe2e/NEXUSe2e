<?xml version="1.0" encoding="UTF-8"?>

<!-- <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
 <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">-->
<!--  <beans> -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">


  <bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="properties">
      <props>
        <prop key="configuration.base.xmlFile"></prop>
        <prop key="configuration.share1.path"></prop>
        <prop key="configuration.share1.name"></prop>
        <prop key="configuration.share2.path"></prop>
        <prop key="configuration.share2.name"></prop>
        <prop key="configuration.share3.path"></prop>
        <prop key="configuration.share3.name"></prop>
        <prop key="configuration.share4.path"></prop>
        <prop key="configuration.share4.name"></prop>
        <prop key="configuration.share5.path"></prop>
        <prop key="configuration.share5.name"></prop>
        <prop key="database.timestamp.pattern"></prop>
        <prop key="engine.lenientBackendStateMachine">false</prop>
      </props>
    </property>
    <property name="locations">
      <list>
        <value>/WEB-INF/config/database.properties</value>
        <value>/WEB-INF/config/bean.properties</value>
      </list>
    </property>
  </bean>

  <bean id="nexusTransportDispatcherMapping" class="org.nexuse2e.configuration.UpdateableUrlHandlerMapping">
    <property name="mappings">
      <value></value>
    </property>
  </bean>

  <bean id="engineController" class="org.nexuse2e.EngineController" init-method="initialize" destroy-method="shutdown">
    <property name="engineControllerStubClass" value="${engineController.stub.class}" />
    <property name="engine" ref="engine" />
    <property name="engineMonitor" ref="engineMonitor" />
  </bean>

  <bean id="engineMonitor" class="org.nexuse2e.EngineMonitor">
    <property name="timeout" value="10"/>
  	<property name="interval" value="10000"/>
  	<property name="autoStart" value="true" />
  </bean>



  <bean id="baseConfigurationProvider" class="org.nexuse2e.configuration.XmlBaseConfigurationProvider">
    <constructor-arg value="${configuration.base.xmlFile}"/>
  </bean>

  <!-- Engine  -->
  <bean id="engine" class="org.nexuse2e.Engine">
    <property name="baseConfigurationProvider" ref="baseConfigurationProvider" />
    <property name="baseConfigurationProviderClass" value="${configuration.base.class}" />
    <property name="cacertsPath" value="${certificate.keystorePath.ca}" />
    <property name="certificatePath" value="${certificate.keystorePath.server}" />
    <property name="timestampPattern" value="${database.timestamp.pattern}" />
    <property name="databaseDialect" value="${database.dialect}" />
    <property name="lenientBackendStateMachine" value="${engine.lenientBackendStateMachine}" />
    <property name="transactionService" ref="transactionService" />
    <property name="configDao" ref="configDao" />
  </bean>

  <!-- RMI  -->
  <bean id="rmiServer" class="org.nexuse2e.integration.NEXUSe2eRMIServer">
    <property name="hostName" value="${rmi.hostName}" />
    <property name="interfaceName" value="${rmi.interfaceName}" />
    <property name="rmiPort" value="${rmi.rmiPort}" />
  </bean>

  <!-- Integration beans -->
  <bean id="httpIntegrationController" class="org.nexuse2e.integration.HTTPIntegrationController"></bean>
  <bean id="debugController" class="org.nexuse2e.integration.DebugController"></bean>
  <bean id="engineStatusController" class="org.nexuse2e.integration.EngineStatusController"></bean>
  <bean id="engineHTTPStatusController" class="org.nexuse2e.integration.EngineHTTPStatusController"></bean>

  <!-- ********************************************** -->
  <!-- Web services                                   -->
  <!-- ********************************************** -->

  <bean id="nexusE2EInterfaceBean" class="org.nexuse2e.integration.NEXUSe2eInterfaceImpl" />
  <bean id="engineStatusInterfaceBean" class="org.nexuse2e.integration.EngineStatusInterfaceImpl" />
  <bean id="nexuse2eUtilitiesBean" class="org.nexuse2e.integration.NEXUSe2eUtilitiesImpl" />

  <!--  DatabaseConfig -->
  <bean id="internal" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${database.driverClassName}" />
    <property name="url" value="${database.url}" />
    <property name="username" value="${database.user}" />
    <property name="password" value="${database.password}" />
    <property name="maxActive" value="-1" />
    
    <!--  needs to be disabled while inital database creation -->
    <!-- 
    <property name="testOnBorrow" value="true" />
    <property name="validationQuery" value="select count(*) from nx_trp"/>
     -->
     
    <!--  8 = serialize --> 
    <!-- <property name="defaultTransactionIsolation" value="8"/>
     -->
    
    
  </bean>

  <!-- 
    <bean id="external" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="${datasource.logicalName}"/>
    </bean>
  -->

  <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="${datasource.type}" />
    <!-- <property name="dataSource" ref="external"/> -->
    <property name="useTransactionAwareDataSource" value="false" />
    
    <property name="mappingResources">
      <list>
        <value>org/nexuse2e/hibernate/nx_conversation.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_message.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_message_label.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_message_payload.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_participant.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_choreography.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_action.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_partner.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_component.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_certificate.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_connection.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_pipelet_param.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_follow_up_action.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_user.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_grant.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_role.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_pipeline.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_pipelet.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_service.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_service_param.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_trp.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_log.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_logger.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_logger_param.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_generic_param.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_mapping.hbm.xml</value>
        <value>org/nexuse2e/hibernate/nx_persistent_property.hbm.xml</value>
      </list>
    </property>
    
    <property name="hibernateProperties">
      <props>        <prop key="hibernate.show_sql">${database.showSQL}</prop>        <prop key="hibernate.dialect">${database.dialect}</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
        <prop key="hibernate.current_session_context_class">org.hibernate.context.ThreadLocalSessionContext</prop>
        <prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
       	
       	<!--  isolation needs to be configured on the datasource -->
        
        <!--
        <prop key="hibernate.c3p0.min_size">2</prop>
        <prop key="hibernate.c3p0.max_size">20</prop>
        <prop key="hibernate.c3p0.timeout">1800</prop>
        <prop key="hibernate.c3p0.max_statements">50</prop>
          <prop key="transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
        -->      </props>
    </property>
  </bean>

  <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
  </bean>

  <aop:config>
    <aop:pointcut id="transactionServices" expression="execution(* org.nexuse2e.dao.*Impl.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionServices"/>
  </aop:config>

  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <!-- 
      <tx:method name="get*" read-only="true"/> 
      -->
      <tx:method name="*ForReport" propagation="SUPPORTS" isolation="READ_UNCOMMITTED"/>
      <tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED"/> <!-- isolation="SERIALIZABLE" READ_COMMITTED-->
    </tx:attributes>
  </tx:advice>



  <bean id="logDao" class="org.nexuse2e.dao.LogDAOImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
  </bean>
  <bean id="configDao" class="org.nexuse2e.dao.ConfigDAOImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
  </bean>
  <bean id="transactionDao" class="org.nexuse2e.dao.TransactionDAOImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
  </bean>
  <bean id="persistentPropertyDao" class="org.nexuse2e.dao.PersistentPropertyDAOImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
  </bean>

  <bean id="mssqlInterceptor" class="org.nexuse2e.dao.MSSQLLockInterceptor">
  	<property name="timeout" value="500" />
  	<property name="retries" value="20" />
  </bean>

<!-- 
<bean id="transactionService" class="org.nexuse2e.controller.TransactionServiceImpl">
	  	<property name="transactionDao" ref="transactionDao"/>
	  	<property name="logDao" ref="logDao"/>
	  </bean>
 -->

  <bean id="transactionService" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="proxyInterfaces"><value>org.nexuse2e.controller.TransactionService</value></property>
	<property name="target">
	  <bean class="org.nexuse2e.controller.TransactionServiceImpl">
	  	<property name="transactionDao" ref="transactionDao"/>
	  	<property name="logDao" ref="logDao"/>
	  </bean>
	</property>
	<property name="interceptorNames">
	  <list>
	    <value>mssqlInterceptor</value>
	  </list>
	</property>
  </bean>

 





  <!-- ui structure -->

  <bean id="targetProviderManager" class="org.nexuse2e.ui.structure.impl.DefaultTargetProviderManager">
    <property name="targetProviders">
      <map>
        <!-- add TargetProvider intances to the map below -->
        <entry>
          <key>
            <value>serverIdentityTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ServerIdentityTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>frontendPipelineTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.PipelineTargetProvider">
            <property name="frontend">
              <value>true</value>
            </property>
          </bean>
        </entry>
        <entry>
          <key>
            <value>backendPipelineTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.PipelineTargetProvider">
            <property name="frontend">
              <value>false</value>
            </property>
          </bean>
        </entry>
        <entry>
          <key>
            <value>componentTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ComponentTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>serviceTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ServiceTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>notifierTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.NotifierTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>choreographyTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ChoreographyTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>collaborationPartnerTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.CollaborationPartnerTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>participantTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ParticipantTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>actionTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.ActionTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>userTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.UserTargetProvider" />
        </entry>
        <entry>
          <key>
            <value>roleTargetProvider</value>
          </key>
          <bean class="org.nexuse2e.ui.structure.impl.RoleTargetProvider" />
        </entry>
      </map>
    </property>
  </bean>

  <bean id="structureService" class="org.nexuse2e.ui.structure.impl.CachedXmlStructureServer" init-method="cacheMenuStructure">
    <property name="spec">
      <value>${struct.spec}</value>
    </property>
    <property name="targetProviderManager">
      <ref bean="targetProviderManager" />
    </property>
  </bean>
  
  <!-- Configuration bean for file download feature -->
  <bean id="fileDownloadConfiguration" class="org.nexuse2e.ui.action.tools.FileDownloadConfiguration">
    <property name="configuration">
      <map>
        <entry key="${configuration.share1.path}"><value>${configuration.share1.name}</value></entry>
        <entry key="${configuration.share2.path}"><value>${configuration.share2.name}</value></entry>
        <entry key="${configuration.share3.path}"><value>${configuration.share3.name}</value></entry>
        <entry key="${configuration.share4.path}"><value>${configuration.share4.name}</value></entry>
        <entry key="${configuration.share5.path}"><value>${configuration.share5.name}</value></entry>
      </map>
    </property>
  </bean>

</beans>
